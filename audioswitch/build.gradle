apply plugin: 'com.android.library'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: "com.jfrog.artifactory"
apply plugin: 'kotlin-android'
apply plugin: "org.jetbrains.dokka"

android {
    compileSdkVersion 31

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 31
        buildConfigField("String", "VERSION_NAME",
                "\"${audioSwitchVersion}\"")

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'
        consumerProguardFiles 'consumer-rules.pro'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    dokkaHtml.configure {
        dokkaSourceSets {
            named("main") {
                noAndroidSdkLink.set(false)
                includeNonPublic = false
                reportUndocumented = true
                skipEmptyPackages = true
            }
        }
    }
}

dependencies {
    implementation "androidx.annotation:annotation:1.2.0"
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0'
    testImplementation 'pl.pragmatists:JUnitParams:1.1.1'
    def androidXTest = '1.4.1-alpha03'
    androidTestUtil "androidx.test:orchestrator:$androidXTest"
    androidTestImplementation "androidx.test:runner:$androidXTest"
    androidTestImplementation "androidx.test:rules:$androidXTest"
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
}

task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.source
}

artifacts {
    archives androidSourcesJar
}

def audioSwitchGroupId = 'com.twilio'
def audioSwitchArtifactId = 'audioswitch'

/*
 * The publishing block enables publishing to both Artifactory and MavenCentral
 */
publishing {
    publications {
        audioSwitchRelease(MavenPublication) {
            artifact("$buildDir/outputs/aar/audioswitch-release.aar")

            artifact androidSourcesJar {
                classifier "sources"
            }

            groupId = audioSwitchGroupId
            artifactId = audioSwitchArtifactId
            version = audioSwitchVersion

            pom {
                name = 'Audioswitch'
                description = 'An Android audio management library for real-time communication apps.'
                url = 'https://github.com/twilio/audioswitch'
                licenses {
                    license {
                        name = 'Apache 2.0'
                        url = 'https://github.com/twilio/audioswitch/blob/master/LICENSE.txt'
                    }
                }
                developers {
                    developer {
                        id = 'Twilio'
                        name = 'Twilio'
                    }
                }
                scm {
                    connection = 'scm:git:github.com/twilio/audioswitch.git'
                    developerConnection = 'scm:git:ssh://github.com/twilio/audioswitch.git'
                    url = 'https://github.com/twilio/audioswitch/tree/main'
                }
                // A slightly hacky fix so that your POM will include any transitive dependencies
                // that your library builds upon
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')

                    project.configurations.implementation.allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}

signing {
    sign publishing.publications
}

/*
 * The artifactory block enables publishing AudioSwitch as a snapshot to JFrog OSS.
 */
artifactory {
    contextUrl = 'https://oss.jfrog.org'
    publish {
        repository {
            repoKey = 'oss-snapshot-local'
            username = jfrogUsername
            password = jfrogPassword
        }
        defaults {
            publications('audioSwitchRelease')
            publishArtifacts = true
            publishPom = true
        }
    }
    clientConfig.info.setBuildNumber(getShortCommitSha())
}
